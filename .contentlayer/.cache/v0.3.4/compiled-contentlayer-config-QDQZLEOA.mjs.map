{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from \"contentlayer/source-files\";\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\nimport rehypeSlug from \"rehype-slug\";\nimport remarkGfm from \"remark-gfm\";\n\nexport const Post = defineDocumentType(() => ({\n  name: \"Post\",\n  filePathPattern: `posts/**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: { type: \"string\", required: true },\n    slug: { type: \"string\", required: true },\n    date: { type: \"date\", required: true },\n    updated: { type: \"date\", required: false },\n    author: { type: \"string\", required: true },\n    topic: { type: \"string\", required: true },\n    tags: { type: \"list\", of: { type: \"string\" }, required: false },\n    summary: { type: \"string\", required: true },\n    keywords: { type: \"list\", of: { type: \"string\" }, required: false },\n    cover: { type: \"string\", required: false },\n    heroAlt: { type: \"string\", required: false },\n    canonical: { type: \"string\", required: false },\n    faq: {\n      type: \"list\",\n      of: {\n        type: \"object\",\n        fields: {\n          q: { type: \"string\", required: true },\n          a: { type: \"string\", required: true }\n        }\n      },\n      required: false\n    },\n    schemaType: { type: \"string\", required: false, default: \"Article\" },\n    readingTime: { type: \"number\", required: true },\n    status: { type: \"string\", required: true, default: \"draft\" }\n  },\n  computedFields: {\n    slug: {\n      type: \"string\",\n      resolve: (doc: any) => doc.slug ?? doc._raw.flattenedPath.replace(/^posts\\//, \"\")\n    },\n    permalink: {\n      type: \"string\",\n      resolve: (doc: any) => `/blog/${doc.slug ?? doc._raw.flattenedPath.replace(/^posts\\//, \"\")}`\n    },\n    readingTimeMinutes: {\n      type: \"number\",\n      resolve: (doc: any) => doc.readingTime ?? Math.max(1, Math.ceil(doc.body.raw.split(/\\s+/).filter(Boolean).length / 200))\n    }\n  }\n}));\n\nexport const DraftPost = defineDocumentType(() => ({\n  name: \"DraftPost\",\n  filePathPattern: `drafts/**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: { type: \"string\", required: true },\n    slug: { type: \"string\", required: false },\n    topic: { type: \"string\", required: false },\n    tags: { type: \"list\", of: { type: \"string\" }, required: false },\n    author: { type: \"string\", required: false },\n    summary: { type: \"string\", required: false },\n    status: { type: \"string\", required: false }\n  },\n  computedFields: {\n    slug: {\n      type: \"string\",\n      resolve: (doc: any) => doc.slug ?? doc._raw.flattenedPath.replace(/^drafts\\//, \"\")\n    }\n  }\n}));\n\nexport default makeSource({\n  contentDirPath: \"content\",\n  documentTypes: [Post, DraftPost],\n  mdx: {\n    remarkPlugins: [remarkGfm],\n    rehypePlugins: [rehypeSlug, [rehypeAutolinkHeadings, { behavior: \"wrap\" }]]\n  }\n});\n"],
  "mappings": "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",
  "names": []
}
